; -*- mode: clojure; -*-
; vim: filetype=clojure

; Event table header
(def mail_header "<table><thead><tr><th style='text-align:left;font-weight:bold;'>Host</th><th style='text-align:left;font-weight:bold;'>Service</th><th style='text-align:left;font-weight:bold;'>Description</th><th style='text-align:left;font-weight:bold;'>Metric</th><th style='text-align:left;font-weight:bold;'>State</th><th style='text-align:left;font-weight:bold;'>Tags</th><th style='text-align:left;font-weight:bold;'>Time</th></tr></thead>")

; Event table footer
(def mail_footer "</table><p style='margin-top:10px;font-style:italic;'>This is an email alarm sent automatically by riemann. Please don't reply.</p>")

; Event table rows
(defn str-event
  (^String [] "")
  (^String [^riemann.codec.Event x]
     (if (nil? x) "" (str  "<tr><td>" (.host x) "</td><td>" (.service x) "</td><td>" (.description x) "</td><td>" (.metric x) "</td><td>" (.state x) "</td><td>" (.tags x) "</td><td>" (riemann.common/time-at (.time x)) "</td></tr>"))))


(def tell-ops
  ; Throttles events in memory up to 1000 for one hour
  (throttle 1000 3600
    ; Rolls events up starting from 5th for one hour
    (rollup 5 3600
      ; Custom mailer, set your smtp settings here
      (let [email (mailer {:host "smtp.example.com"
                           :port 25
                           :user "riemann@example.com"
                           :pass "somePassword"
                           :from "riemann@example.com"
                          }
        {:body (fn [events] 
          [{:type "text/html; charset=utf-8", 
:content (binding [*print-readably* nil]
          (apply prn-str
            (concat (cons mail_header (map str-event events)) [mail_footer])))
           }])
        })]
        (email "ops@your-company.com")))))

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    ; Index all events immediately.
    index

      ; Mail send criteria
      ;(changed-state {:init "ok"}
      (where (and (host "your-hostcriteria") 
        (state "critical")
        ;(state "warning")
        ;(state "ok")
        ) tell-ops)
      ;)

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))))